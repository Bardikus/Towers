<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_unit_3f</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_unit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
costArrayIndex = 2

gold_reward_gate = 6
goldReward       = 5

hp_initial           = 45
hp_current           = hp_initial 

range                = 50
dmg                  = 150
attackSpeed          = 2 * 60
healAmount           = 3

spd = 1.5

nearbyFriendlyDamage = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DESTROY IF HP &lt; 0 + CUSTOM HEALER HOLY BOMB FUNCTIONALITY
if (hp_current &lt;= 0)
{
   obj_system.gold_player2 += goldReward
   idd = instance_create(x, y, obj_healer_bomb)
   idd.dmg = dmg
   instance_destroy()
}


//CHECK IF THERE IS A NEARBY DAMAGED UNIT THAT NEEDS HEALING
if (object_exists(obj_unit_healable))
{
    idd = instance_nearest(x, y, obj_unit_healable)
    if ( idd != noone &amp;&amp; (distance_to_point(idd.x, idd.y) &lt; range) &amp;&amp; idd.hp_current &lt; 9/10 * idd.hp_initial)
    {
        nearbyFriendlyDamage = true
    }
    else
        nearbyFriendlyDamage = false
}

//IF THERE IS, STOP TO HEAL IT to 90%, then continue on the path
if (nearbyFriendlyDamage == true)
{
    path_speed = 0
    //used normal damage variables for heal purposes
    if (canShoot == true &amp;&amp; idd != noone)
    {
        idd.hp_current += healAmount
        canShoot        = false
        alarm[0]        = attackSpeed
    }
}
else
{
    alarm[1] = irandom(resumePathDelay)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

draw_set_color(c_lime)
if(nearbyFriendlyDamage == true)
{
    draw_line_width(x, y, idd.x, idd.y, 5)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
